#
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Support for Python is experimental, and requires building SNAPSHOT image of Apache Spark,
# with `imagePullPolicy` set to Always

apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: pyspark-pi
  namespace: default
spec:
  type: Python
  pythonVersion: "3"
  mode: cluster
  #image: simspark-py:3.3.1
  imagePullPolicy: Never
  #deps:
    #files: /Users/sigmar/spark-on-k8s-operator/juspark.pex
  #  pyFiles: [local:///opt/spark/klos.py]
  # mainApplicationScript: |
  #   import sys
  #   from random import random
  #   from operator import add
  #   from pyspark.sql import SparkSession

  #   if __name__ == "__main__":
  #     """
  #         Usage: pi [partitions]
  #     """
  #     spark = SparkSession\
  #         .builder\
  #         .appName("PythonPi")\
  #         .getOrCreate()

  #     partitions = int(sys.argv[1]) if len(sys.argv) > 1 else 2
  #     n = 100000 * partitions

  #     def f(_: int) -> float:
  #         x = random() * 2 - 1
  #         y = random() * 2 - 1
  #         return 1 if x ** 2 + y ** 2 <= 1 else 0

  #     count = spark.sparkContext.parallelize(range(1, n + 1), partitions).map(f).reduce(add)
  #     print("Pi is roughly %f" % (4.0 * count / n))

  #     spark.stop()
  #mainApplicationFile: local:///opt/spark/klobb.py
  # mainApplicationFile: local:///opt/spark/examples/src/main/python/pi.py
  mainApplicationFile: /Users/sigmar/spark-on-k8s-operator/pi.py
  #deps:
  #  packages:
      #- org.apache.poi:poi:5.2.3
  #    - org.apache.hadoop:hadoop-aws:3.3.4
    #excludePackages:
    #  - org.apache.spark:spark-submit-parent
  sparkVersion: "3.3.1"
  #hadoopConf:
  #  fs.s3a.endpoint: localhost:4566
  #  fs.s3a.connection.ssl.enabled: false
  #  fs.s3a.path.style.access: true
  #  fs.s3a.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  #  com.amazonaws.services.s3.enableV4: true
  #  fs.s3a.committer.name: partitioned
  #  fs.s3a.aws.credentials.provider: org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider
  sparkConf:
    spark.hadoop.com.amazonaws.services.s3.enableV4: true
    spark.hadoop.fs.s3a.path.style.access: true
    spark.hadoop.fs.s3a.committer.name: partitioned
    spark.hadoop.fs.s3a.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
    spark.hadoop.fs.s3a.connection.ssl.enabled: false
    spark.hadoop.fs.s3a.endpoint: 172.17.0.2:4566
    #spark.hadoop.fs.s3a.endpoint: localhost:4566
    spark.hadoop.fs.s3a.aws.credentials.provider: org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider
    spark.kubernetes.appKillPodDeletionGracePeriod: 2000
  restartPolicy:
    type: OnFailure
    onFailureRetries: 3
    onFailureRetryInterval: 10
    onSubmissionFailureRetries: 5
    onSubmissionFailureRetryInterval: 20
  driver:
    env:
      - name: JUPYTER_RUNTIME_DIR
        value: /opt/spark/work-dir
    image: simspark-jupyter:3.3.1
    javaOptions: "-Divy.cache.dir=/tmp -Divy.home=/tmp"
    cores: 1
    coreLimit: "1200m"
    memory: "512m"
    labels:
      version: 3.3.1
    serviceAccount: spark
  executor:
    image: simspark-py:3.3.1
    javaOptions: "-Divy.cache.dir=/tmp -Divy.home=/tmp"
    cores: 1
    instances: 1
    memory: "512m"
    labels:
      version: 3.3.1
